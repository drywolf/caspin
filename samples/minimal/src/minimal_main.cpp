#include <iostream>

#include "cspNativePackage.h"
#include "cspOutputListener.h"
#include "cspSystem.h"
#include "cspVmCore.h"

#ifdef WIN32
#	define SAMPLE_PATH csp::String("../../samples/minimal")
#else
#	define SAMPLE_PATH csp::String("../samples/minimal")
#endif
//-----------------------------------------------------------------------
class coutLog : public csp::OutputListener
{
public:
	void output(const csp::String& message)
	{
		std::cout << message << std::endl;
	}
};
//-----------------------------------------------------------------------
int main(int argc, char* argv[])
{
	std::cout << "----------Start-----------" << std::endl << std::endl;

	// initialize the garbage collector heap
	csp::VmCore::createGcHeap();

	// create a virtual machine instance
	csp::VmCore* core;
	CSP_CREATE_VMCORE(core);

	// register an OutputLogger to listen for output that is generated by the VmCore
	coutLog logger;
	core->addListener(&logger);

	// register the caspin base package
	NativePackage(core, avmplus::NativeID, caspin_base);

	// initialize the registered packages
	core->initializePackages();

	// execute the compiled ActionScript sample file
	bool ok = core->executeFile(SAMPLE_PATH + "/as3/minimal.abc");

	avmplus::Atom* args = new avmplus::Atom[argc];

	// convert the C++ program arguments to an AS3 equivalent
	// i=1 --> ignore program path argument
	for(int i=1; i<argc; ++i)
	{
		avmplus::Atom arg_atom = core->toScript(argv[i]);
		args[i] = arg_atom;
	}

	// call the main function of the .abc file
	avmplus::Atom return_value = core->callGlobalFunction("main", "", argc-1, args);

	delete[] args;

	// print the integer value that was returned from the AS3 main function
	std::cout << "AS3-main() return value: " << core->integer(return_value) << std::endl;

	// destroy the virtual machine instance
	CSP_DESTROY_VMCORE(core);

	// clean up the garbage collector heap
	if(ok)
		csp::VmCore::destroyGcHeap();

	std::cout << std::endl << "-----------End------------" << std::endl;
	std::cout << std::endl << "Press ENTER to continue..." << std::endl;
	std::cin.get();

	return 0;
}
//-----------------------------------------------------------------------
